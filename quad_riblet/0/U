/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#includeIfPresent "../constants.dat"
// //p_0 = $p_0;
// p100 $p_1;
// const scalar p1_i = p100;
// h = $h;
// L = $L;
dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    leftWall
    {

      // type codedFixedValue;
      // value     uniform (0 0 0);
      //
      // redirectType    parabolic_vel_profile;
      //
      // code
      // #{
      //   #include "/home/patrick/OpenFOAM/patrick-7/run/test_riblets/test_riblet_v4/quad_riblet/constants2.dat"
      //   const fvPatch& boundaryPatch = patch();
      //   const vectorField& Cf = boundaryPatch.Cf();
      //   vectorField& field = *this;
      //
      //   forAll(Cf, faceI)
      //   {
      //     const scalar y = Cf[faceI].y();
      //     //const scalar u_x = -((p_1 - p_0)/L)*y*(h-y);
      //     const scalar u_x = (u_max/h)*y;
      //
      //     field[faceI] = vector(u_x, 0, 0);
      //   }
      // #};
        type fixedValue;
        value uniform ($u_max 0 0);

    }


    rightWall
    {

      type zeroGradient;
      //type pressureInletOutletVelocity;
      //value uniform (0 0 0);
    }


    lowerWall
    {
        type            noSlip;
    }


    atmosphere
    {

        type slip;
    }


    defaultFaces
    {
        type            empty;
    }
}


// ************************************************************************* //
